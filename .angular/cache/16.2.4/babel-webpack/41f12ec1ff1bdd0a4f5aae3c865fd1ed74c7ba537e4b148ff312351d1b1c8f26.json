{"ast":null,"code":"var _class;\nimport { HttpParams } from '@angular/common/http';\nimport { map } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class WeatherService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    this.weatherEndpoint = `http://api.openweathermap.org/data/2.5/weather`; //?zip=95742,US&appid=5a4b2d457ecbef9eb2a71e480b947604`;\n    this.appId = `5a4b2d457ecbef9eb2a71e480b947604`;\n  }\n  getWeatherReport(zipcode) {\n    console.info(`getWeatherReport for ${zipcode}`);\n    return this.httpClient.get(this.weatherEndpoint, {\n      params: new HttpParams().set('zip', `${zipcode},US`).set('appid', this.appId)\n    }).pipe(map(response => {\n      console.info(response);\n      return response;\n    }));\n  }\n}\n_class = WeatherService;\n_class.ɵfac = function WeatherService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.HttpClient));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["HttpParams","map","WeatherService","constructor","httpClient","weatherEndpoint","appId","getWeatherReport","zipcode","console","info","get","params","set","pipe","response","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\niels\\source\\repos\\ng-certification\\src\\app\\weather.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http'\nimport { Observable, map } from 'rxjs';\nimport { Weather } from './weatherinfo.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class WeatherService {\n\n  constructor(private httpClient: HttpClient) { }\n\n  weatherEndpoint = `http://api.openweathermap.org/data/2.5/weather` //?zip=95742,US&appid=5a4b2d457ecbef9eb2a71e480b947604`;\n  appId = `5a4b2d457ecbef9eb2a71e480b947604`;\n\n  \n  getWeatherReport(zipcode: string): Observable<Weather>\n  {\n    console.info(`getWeatherReport for ${zipcode}`);\n    return this.httpClient\n      .get(this.weatherEndpoint,\n        {\n          params: new HttpParams()\n            .set('zip', `${zipcode},US`)\n            .set('appid', this.appId)\n        }).pipe(\n          map((response) => {\n            console.info(response);\n            return response;\n          }));\n  }\n}\n"],"mappings":";AACA,SAAqBA,UAAU,QAAQ,sBAAsB;AAC7D,SAAqBC,GAAG,QAAQ,MAAM;;;AAMtC,OAAM,MAAOC,cAAc;EAEzBC,YAAoBC,UAAsB;IAAtB,KAAAA,UAAU,GAAVA,UAAU;IAE9B,KAAAC,eAAe,GAAG,gDAAgD,EAAC;IACnE,KAAAC,KAAK,GAAG,kCAAkC;EAHI;EAM9CC,gBAAgBA,CAACC,OAAe;IAE9BC,OAAO,CAACC,IAAI,CAAC,wBAAwBF,OAAO,EAAE,CAAC;IAC/C,OAAO,IAAI,CAACJ,UAAU,CACnBO,GAAG,CAAC,IAAI,CAACN,eAAe,EACvB;MACEO,MAAM,EAAE,IAAIZ,UAAU,EAAE,CACrBa,GAAG,CAAC,KAAK,EAAE,GAAGL,OAAO,KAAK,CAAC,CAC3BK,GAAG,CAAC,OAAO,EAAE,IAAI,CAACP,KAAK;KAC3B,CAAC,CAACQ,IAAI,CACLb,GAAG,CAAEc,QAAQ,IAAI;MACfN,OAAO,CAACC,IAAI,CAACK,QAAQ,CAAC;MACtB,OAAOA,QAAQ;IACjB,CAAC,CAAC,CAAC;EACX;;SAtBWb,cAAc;;mBAAdA,MAAc,EAAAc,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;;SAAdjB,MAAc;EAAAkB,OAAA,EAAdlB,MAAc,CAAAmB,IAAA;EAAAC,UAAA,EAFb;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}