{"ast":null,"code":"var _class;\nimport { HttpParams } from '@angular/common/http';\nimport { map } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class WeatherService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    this.appId = `5a4b2d457ecbef9eb2a71e480b947604`;\n    this.weatherEndpoint = `http://api.openweathermap.org/data/2.5/weather`; //?zip=95742,US&appid=5a4b2d457ecbef9eb2a71e480b947604`;\n    this.forecastEndpoint = `https://api.openweathermap.org/data/2.5/forecast`; //https://api.openweathermap.org/data/2.5/forecast?zip=20500&appid=5a4b2d457ecbef9eb2a71e480b947604\n    this.iconEndpoint = \"https://www.angulartraining.com/images/weather\";\n  }\n  getWeatherReport(zipcode) {\n    //console.info(`getWeatherReport for ${zipcode}`);\n    return this.httpClient.get(this.weatherEndpoint, {\n      params: new HttpParams().set('zip', `${zipcode},US`).set('appid', this.appId)\n    }).pipe(map(response => {\n      //console.info(response);\n      return response;\n    }));\n  }\n  getForecast(zipcode) {\n    console.info(zipcode);\n    return this.httpClient.get(this.forecastEndpoint, {\n      params: new HttpParams().set('zip', zipcode).set('appid', this.appId)\n    }).pipe(map(response => {\n      console.info(response);\n      return response;\n    }));\n  }\n  getIcon(description) {\n    switch (description) {\n      case 'clouds':\n      case 'fog':\n      case 'overcast clouds':\n      case 'scattered clouds':\n      case 'few clouds':\n      case 'broken clouds':\n        return `${this.iconEndpoint}/clouds.png`;\n      case 'rain':\n      case 'light rain':\n        return `${this.iconEndpoint}/rain.png`;\n      case 'snow':\n        return `${this.iconEndpoint}/snow.png`;\n      case 'clear sky':\n      case 'sun':\n        return `${this.iconEndpoint}/sun.png`;\n      default:\n        return 'unknown';\n    }\n  }\n}\n_class = WeatherService;\n_class.ɵfac = function WeatherService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.HttpClient));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["HttpParams","map","WeatherService","constructor","httpClient","appId","weatherEndpoint","forecastEndpoint","iconEndpoint","getWeatherReport","zipcode","get","params","set","pipe","response","getForecast","console","info","getIcon","description","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\niels\\source\\repos\\ng-certification\\src\\app\\weather.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http'\nimport { Observable, map } from 'rxjs';\nimport { Weather } from './weatherinfo.model';\nimport { Forecast } from './forecast.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class WeatherService {\n\n  constructor(private httpClient: HttpClient) { }\n  appId = `5a4b2d457ecbef9eb2a71e480b947604`;\n\n  weatherEndpoint = `http://api.openweathermap.org/data/2.5/weather`; //?zip=95742,US&appid=5a4b2d457ecbef9eb2a71e480b947604`;\n  forecastEndpoint = `https://api.openweathermap.org/data/2.5/forecast`; //https://api.openweathermap.org/data/2.5/forecast?zip=20500&appid=5a4b2d457ecbef9eb2a71e480b947604\n  iconEndpoint = \"https://www.angulartraining.com/images/weather\";\n\n  getWeatherReport(zipcode: string): Observable<Weather> {\n    //console.info(`getWeatherReport for ${zipcode}`);\n    return this.httpClient\n      .get(this.weatherEndpoint,\n        {\n          params: new HttpParams()\n            .set('zip', `${zipcode},US`)\n            .set('appid', this.appId)\n        }).pipe(\n          map((response) => {\n            //console.info(response);\n            return response as Weather;\n          }));\n  }\n\n  getForecast(zipcode: string): Observable<Forecast> {\n    console.info(zipcode);\n    return this.httpClient\n      .get(this.forecastEndpoint,\n        {\n          params: new HttpParams()\n            .set('zip', zipcode)\n            .set('appid', this.appId)\n        }).pipe(\n          map((response) => {\n            console.info(response);\n            return response as Forecast;\n          }));\n  }\n\n  getIcon(description: string) {\n    switch (description) {\n      case 'clouds':\n      case 'fog':\n      case 'overcast clouds':\n      case 'scattered clouds':\n      case 'few clouds':\n      case 'broken clouds':\n        return `${this.iconEndpoint}/clouds.png`;\n      case 'rain':\n      case 'light rain':\n        return `${this.iconEndpoint}/rain.png`;\n      case 'snow':\n        return `${this.iconEndpoint}/snow.png`;\n      case 'clear sky':\n      case 'sun':\n        return `${this.iconEndpoint}/sun.png`;\n      default:\n        return 'unknown';\n    }\n  }\n}\n"],"mappings":";AACA,SAAqBA,UAAU,QAAQ,sBAAsB;AAC7D,SAAqBC,GAAG,QAAQ,MAAM;;;AAOtC,OAAM,MAAOC,cAAc;EAEzBC,YAAoBC,UAAsB;IAAtB,KAAAA,UAAU,GAAVA,UAAU;IAC9B,KAAAC,KAAK,GAAG,kCAAkC;IAE1C,KAAAC,eAAe,GAAG,gDAAgD,CAAC,CAAC;IACpE,KAAAC,gBAAgB,GAAG,kDAAkD,CAAC,CAAC;IACvE,KAAAC,YAAY,GAAG,gDAAgD;EALjB;EAO9CC,gBAAgBA,CAACC,OAAe;IAC9B;IACA,OAAO,IAAI,CAACN,UAAU,CACnBO,GAAG,CAAC,IAAI,CAACL,eAAe,EACvB;MACEM,MAAM,EAAE,IAAIZ,UAAU,EAAE,CACrBa,GAAG,CAAC,KAAK,EAAE,GAAGH,OAAO,KAAK,CAAC,CAC3BG,GAAG,CAAC,OAAO,EAAE,IAAI,CAACR,KAAK;KAC3B,CAAC,CAACS,IAAI,CACLb,GAAG,CAAEc,QAAQ,IAAI;MACf;MACA,OAAOA,QAAmB;IAC5B,CAAC,CAAC,CAAC;EACX;EAEAC,WAAWA,CAACN,OAAe;IACzBO,OAAO,CAACC,IAAI,CAACR,OAAO,CAAC;IACrB,OAAO,IAAI,CAACN,UAAU,CACnBO,GAAG,CAAC,IAAI,CAACJ,gBAAgB,EACxB;MACEK,MAAM,EAAE,IAAIZ,UAAU,EAAE,CACrBa,GAAG,CAAC,KAAK,EAAEH,OAAO,CAAC,CACnBG,GAAG,CAAC,OAAO,EAAE,IAAI,CAACR,KAAK;KAC3B,CAAC,CAACS,IAAI,CACLb,GAAG,CAAEc,QAAQ,IAAI;MACfE,OAAO,CAACC,IAAI,CAACH,QAAQ,CAAC;MACtB,OAAOA,QAAoB;IAC7B,CAAC,CAAC,CAAC;EACX;EAEAI,OAAOA,CAACC,WAAmB;IACzB,QAAQA,WAAW;MACjB,KAAK,QAAQ;MACb,KAAK,KAAK;MACV,KAAK,iBAAiB;MACtB,KAAK,kBAAkB;MACvB,KAAK,YAAY;MACjB,KAAK,eAAe;QAClB,OAAO,GAAG,IAAI,CAACZ,YAAY,aAAa;MAC1C,KAAK,MAAM;MACX,KAAK,YAAY;QACf,OAAO,GAAG,IAAI,CAACA,YAAY,WAAW;MACxC,KAAK,MAAM;QACT,OAAO,GAAG,IAAI,CAACA,YAAY,WAAW;MACxC,KAAK,WAAW;MAChB,KAAK,KAAK;QACR,OAAO,GAAG,IAAI,CAACA,YAAY,UAAU;MACvC;QACE,OAAO,SAAS;;EAEtB;;SA3DWN,cAAc;;mBAAdA,MAAc,EAAAmB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;;SAAdtB,MAAc;EAAAuB,OAAA,EAAdvB,MAAc,CAAAwB,IAAA;EAAAC,UAAA,EAFb;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}